{
  lib,
  config,
  pkgs,
  ...
}:
with lib;
let
  cfg = config.services.containers.copyparty;
in
{
  options.services.containers.copyparty = {
    enable = mkEnableOption "Enable the copyparty fileserver";
    version = mkOption {
      type = types.str;
      default = "latest";
    };
    ports = {
      ui = mkOption {
        type = types.port;
        default = 80;
      };
    };
    volumes = {
      config = mkOption {
        type = types.str;
        default = "${config.users.users.osmo.home}/copyparty/config";
      };
      data = mkOption {
        type = types.str;
        default = "${config.users.users.osmo.home}/copyparty/data";
      };
    };
    timeZone = mkOption {
      type = types.str;
      default = "Etc/UTC";
    };
    enableHomePage = mkOption {
      type = types.bool;
      default = true;
    };
    traefik = {
      enable = mkOption {
        type = types.bool;
        default = true;
      };
      urlBase = mkOption {
        type = types.str;
        default = "klusteri-0.kotiserweri.zip";
      };
    };
    options = {
    };
  };

  config = mkIf cfg.enable {
    virtualisation.oci-containers.containers."copyparty" = {
      image = "copyparty/ac:${cfg.version}";
      environment = {
        "LD_PRELOAD" = "/usr/lib/libmimalloc-secure.so.NOPE";
        "PYTHONUNBUFFERED" = "1";
      };
      volumes = [
        "${cfg.volumes.config}:/cfg:rw,z"
        "${cfg.volumes.data}:/w:rw,z"
      ];
      ports = [
        "${toString cfg.ports.ui}:3923/tcp"
      ];
      user = "1000:100";
      log-driver = "journald";
      extraOptions = [
        "--health-cmd=wget --spider -q 127.0.0.1:3923/?reset=/._"
        "--health-interval=1m0s"
        "--health-retries=5"
        "--health-start-period=15s"
        "--health-timeout=2s"
        "--network-alias=copyparty"
        "--network=copyparty_default"
      ];
      labels =
        (
          if cfg.enableHomePage == true then
            {
              "homepage.group" = "Services";
              "homepage.name" = "Copyparty";
              "homepage.icon" = "copyparty";
              "homepage.href" = "https://copyparty.${cfg.traefik.urlBase}";
              "homepage.description" = "Copyparty file server";
            }
          else
            { }
        )
        // (
          if cfg.traefik.enable == true then
            {
              "traefik.enable" = "true";
              "traefik.http.routers.copyparty.rule" = "Host(`copyparty.${cfg.traefik.urlBase}`)";
              "traefik.http.routers.copyparty.entrypoints" = "websecure";
              "traefik.http.routers.copyparty.tls.certresolver" = "porkbun";
              "traefik.http.services.copyparty.loadbalancer.server.port" = "3923";
            }
          else
            { }
        );
    };
    systemd.services."podman-copyparty" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "no";
      };
      after = [
        "podman-network-copyparty_default.service"
      ];
      requires = [
        "podman-network-copyparty_default.service"
      ];
      partOf = [
        "podman-compose-copyparty-root.target"
      ];
      wantedBy = [
        "podman-compose-copyparty-root.target"
      ];
    };

    systemd.services."podman-network-copyparty_default" = {
      path = [ pkgs.stable.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f copyparty_default";
      };
      script = ''
        podman network inspect copyparty_default || podman network create copyparty_default
      '';
      partOf = [ "podman-compose-copyparty-root.target" ];
      wantedBy = [ "podman-compose-copyparty-root.target" ];
    };

    systemd.targets."podman-compose-copyparty-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

    networking.firewall.allowedTCPPorts = builtins.attrValues cfg.ports;
    systemd.tmpfiles.rules = [
      "d ${cfg.volumes.config} 0770 osmo users - -"
      "d ${cfg.volumes.data} 0770 osmo users - -"
    ];
  };
}
